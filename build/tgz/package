#!/usr/bin/env ruby

project_root = ARGV.shift
package_file = ARGV.shift

unless project_root && package_file
  puts "usage: tgz/package PROJECT_ROOT PACKAGE_FILE"
  exit 1
end

GEM_BLACKLIST = %w( bundler heroku )

def gem_paths
  %x{ bundle show }.split("\n").map do |line|
    if line =~ /^  \* (.*?) \((.*?)\)/
      %x{ bundle show #{$1} }.strip
    end
  end.compact
end

def copy_gems(package_gem_dir)
  lines = %x{ bundle show }.strip.split("\n")
  raise "error running bundler" unless $?.success?

  %x{ env BUNDLE_WITHOUT="development:test" bundle show }.split("\n").each do |line|
    if line =~ /^  \* (.*?) \((.*?)\)/
      next if GEM_BLACKLIST.include?($1)
      puts "vendoring: #{$1}-#{$2}"
      gem_dir = %x{ bundle show #{$1} }.strip
      %x{ cp -R #{gem_dir} #{package_gem_dir}/ }
    end
  end.compact
end

def package_path(path, stream)
  puts "#{path}/**/*.rb"
  Dir["#{path}/**/*"].each do |file|
    next unless File.file?(file)
    puts "finding file: #{file}"
    relative = file.gsub(/^#{path}/, '')
    relative.gsub!(/^\//, '')
    stream.puts("__FILE__ #{relative}")
    stream.puts(File.read(file))
    stream.puts("__ENDFILE__")
  end
end

Dir.chdir(project_root)

version = package_file.match(/heroku-([a-z0-9\.]+)\./)[1]

require "tmpdir"
package_dir = "#{Dir.mktmpdir}/heroku-client"
package_gem_dir = "#{package_dir}/vendor/gems"

puts "building in: #{package_dir}"
%x{ mkdir -p #{package_gem_dir} }
copy_gems package_gem_dir

%x{ cd #{project_root} && find . -name "*.rbc" -delete }
%x{ cp -R #{project_root}/data #{package_dir} }
%x{ cp -R #{project_root}/lib #{package_dir} }

File.open("#{package_dir}/heroku", "w") do |file|
  file.puts <<-PREAMBLE
#!/usr/bin/env ruby

gem_dir = File.expand_path("../vendor/gems", __FILE__)
Dir["\#{gem_dir}/**/lib"].each do |libdir|
$:.unshift libdir
end

$:.unshift File.expand_path("../lib", __FILE__)

require 'heroku'
require 'heroku/command'

args = ARGV.dup
ARGV.clear
command = args.shift.strip rescue 'help'

Heroku::Command.load
Heroku::Command.run(command, args)
  PREAMBLE
end

%x{ chmod +x #{package_dir}/heroku }

if plugins = (ENV["PLUGINS"] || "").split(" ")
  plugins.each do |plugin|
    puts "plugin: #{plugin}"
    %x{ mkdir -p #{package_dir}/plugins }
    %x{ cd #{package_dir}/plugins && git clone #{plugin} 2>&1 }
    %x{ rm -rf $(find #{package_dir}/plugins -name .git) }
  end
end

%x{ mkdir -p #{project_root}/pkg }
%x{ cd #{package_dir}/.. && tar czvpf #{project_root}/#{package_file} * 2>&1 }
